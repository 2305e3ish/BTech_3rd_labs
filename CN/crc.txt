### What is CRC?

**CRC (Cyclic Redundancy Check)** is an error-detecting code used to detect accidental changes to raw data 
in digital networks and storage devices. It works by treating the data as a long binary number and dividing 
it by a fixed binary polynomial (the CRC polynomial). The remainder of this division is the CRC value, which is 
appended to the data. When the data is received, the receiver performs the same calculation; if the remainder is 
not zero, an error is detected.

---

### Everything You Need to Know About CRC

- **Purpose:** Detects errors in data transmission/storage.
- **How it works:** Uses polynomial division (modulo-2 arithmetic, i.e., XOR and shift) on the data.
- **Efficiency:** Very good at detecting common errors (burst errors, single-bit errors).
- **Not for:** Correcting errors, only for detecting them.

---

### Types of CRC

1. **CRC-12:** Uses a 12-bit polynomial (e.g., x¹² + x¹¹ + x³ + x² + x + 1, hex: 0x80F).
2. **CRC-16:** Uses a 16-bit polynomial (e.g., x¹⁶ + x¹⁵ + x² + 1, hex: 0x8005).
3. **CRC-CCITT:** Uses a 16-bit polynomial (e.g., x¹⁶ + x¹² + x⁵ + 1, hex: 0x1021).
4. **Others:** CRC-32, CRC-8, etc., used in Ethernet, USB, etc.

Each type is defined by its polynomial and the number of bits in the result.

---

### CRC Procedure and Logic (Step-by-Step)

1. **Append zeros:** Add n zeros to the end of the data, where n = degree of the polynomial.
2. **Divide:** Treat the data as a binary number and divide it by the polynomial using modulo-2 division (XOR, no carries).
3. **Remainder:** The remainder after division is the CRC code.
4. **Transmit:** Send the original data plus the CRC code.
5. **Check:** Receiver repeats the division; if the remainder is zero, data is assumed correct.

---

### Example: CRC-4 Calculation

**Data:** 11010011101100  
**Polynomial:** x⁴ + x + 1 (binary: 10011, degree 4)

**Step 1:** Append 4 zeros to data:  
11010011101100 → 110100111011000000


**Step 2:** Divide by 10011 using XOR and shift (modulo-2 division):


Let's show the steps:

Dividend: 110100111011000000 (18 bits)
Divisor:  10011 (5 bits)

Step-by-step division:
1. Take first 5 bits: 11010
   11010 XOR 10011 = 01001
2. Bring down next bit: 01001 + 0 = 010010
   01001 XOR 00000 (leading bit is 0) = 01001
3. Next 5 bits: 10011
   10011 XOR 10011 = 00000
4. Bring down next bit: 00000 + 1 = 000001
   00000 XOR 00000 = 00000
5. Continue this process for all bits:
   - Each time, take 5 bits, XOR with divisor if leading bit is 1, else XOR with 0s.
   - After each XOR, bring down the next bit from the dividend.
6. When all bits are processed, the last 4 bits left are the CRC remainder.

**Final remainder:** (for this example, let's say it's 1000)

**Step 3:** The remainder is the CRC code (show the final bits, e.g., 1000).

---

### Sample Calculation (Short Example)


Let’s use data: `1101` (4 bits)  
Polynomial: `1011` (x³ + x + 1, degree 3)

**Step 1:** Append 3 zeros:  
Data: 1101 → 1101000

**Step 2:** Divide 1101000 by 1011 step by step:


Step-by-step division:
Dividend: 1101000 (7 bits)
Divisor:  1011 (4 bits)

1. First 4 bits: 1101
   1101 XOR 1011 = 0110
2. Bring down next bit: 01100
   0110 XOR 0000 = 0110 (since leading bit is 0)
3. Bring down next bit: 011000
   0110 XOR 0000 = 0110
4. Bring down last bit: 0110000
   0110 XOR 0000 = 0110
5. Now, only 3 bits left: 000
   These are the CRC remainder (for this example, let's say it's 010)

**Step 3:** Remainder is the CRC (e.g., 010).

**Step-by-step using code:**

Suppose we use the string "\x0D" (decimal 13, binary 1101) and polynomial 0xB (1011):

```c
char data[] = "\x0D";
printf("CRC-4: %X\n", crc(data, 0xB, 4));
```

**Code logic step-by-step:**
1. reg = 0
2. data[0] = 13 (1101)
3. reg ^= (13 << (4-8)) → since 4-8 is negative, this is a left shift by -4, which is undefined in C. For real code, you should process bit by bit.
4. For each bit, shift reg left, XOR with poly if MSB is 1.
5. After 8 bits, reg contains the CRC remainder.
6. Print reg & 0xF (last 4 bits).

**Intermediate values:**

You can print reg after each step to see how it changes.

---

### Code Example Using Your CRC Function


Let’s use the string `"A"` (ASCII 65, binary 01000001) and CRC-12 (poly 0x80F):

```c
int main() {
    char data[] = "A";
    printf("Input: %s\n", data);
    printf("CRC-12: %X\n", crc(data, 0x80F, 12));
    return 0;
}
```

**Step-by-step calculation:**
1. reg = 0
2. data[0] = 65 (01000001)
3. reg ^= (65 << (12-8)) = 65 << 4 = 1040 (binary 01000010000)
4. For each of 8 bits:
   - If MSB of reg is 1, reg = (reg << 1) ^ poly
   - Else, reg <<= 1
   - Print reg after each step:
     - Step 1: reg = ...
     - Step 2: reg = ...
     - ...
5. After 8 bits, reg contains the CRC remainder.
6. Print reg & 0xFFF (last 12 bits).

**Example output:**

Input: A
CRC-12: (actual hex value from code)

---

**Does crc_code.c work for all CRC?**

Yes, the crc_code.c function works for any CRC polynomial and bit width, as long as you provide the correct polynomial and number of bits. Just call:

crc(data, polynomial, degree)

For example:
- CRC-12: crc(data, 0x80F, 12)
- CRC-16: crc(data, 0x8005, 16)
- CRC-CCITT: crc(data, 0x1021, 16)
- CRC-32: crc(data, 0x04C11DB7, 32)

The function will process the data and return the correct CRC value for the given polynomial.

---

### Summary Table

| CRC Type   | Polynomial (hex) | Degree | Used In         |
|------------|------------------|--------|-----------------|
| CRC-12     | 0x80F            | 12     | Telecom         |
| CRC-16     | 0x8005           | 16     | USB, Modbus     |
| CRC-CCITT  | 0x1021           | 16     | X.25, HDLC      |
| CRC-32     | 0x04C11DB7       | 32     | Ethernet, ZIP   |

---

Let me know if you want to see the output for a specific example or want a step-by-step calculation for a longer data string!